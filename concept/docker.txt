
- What is docker :

Docker is a Platform for building, running and shipping applications in consistent manner

- Why app can't run :

peobably come across this situation where your application works on your developmnrt machine but doesn't somewhere
else can u think of three reasons why this haooens

- reasons Why :

-----------------------------------------------------------------------------------------------------------------------------------------------

containers  :
    an isolated environment for running an application

-----------------------------------------------------------------------------------------------------------------------------------------------

containers Vs Vm

Vm : as the name implies is an abstraction of a machine or physical hardware so we can run several virtual machines as real machine

EX :

 WINDOWS | LINUX
 ^ ^
  |
______________
 HYPERVISOR
______________

^ ^
 |
 -----
| MAC |
 ----- 

 -- HYPERVISOR : 
    is software we use to create and manage virtual machines there are many hypervisors available out there like virtualbox

 Problem with hypervisors : needs a full copy of an os that needs to be licensed patched and monitored and that's why these VM slow to start

 another problem is that these virtual machine are resource intensive because each virtual machine takes a  slice of the actual physical hardware like cpu memory 


 -- Containers :
 
  giveive us the same kind of isolation

  - Allow running mutiple apps in isolation
  - Are lightweight
  - Use os of the host 
  - start quickly
  - neeed less hardware resources


  - allow running mutiple apps in isolation and more lightweight they don't need a full os 

  (in fact all containers on single machine share the the os of the host) that means we need to license patch and monitor a single os 
  also because the os already started on the host a container can start up pretty quickly usually in a second sometimes less and also 
  these containers don't need a slice of the hardware resources on the host so we don't need to give them a cpu memory ...

 - we can run mutiple containers 1 or 1000 side by side  



 ----------------------------------------------------------------------------------------------------------------------------------------------
  ~ Architecture of docker ~ 
    

            rest api
    (-)   ---------> (-)
    client              server | docker engine


Docker uses a client server Architecture so it has client component that talks to a server component using a restful api 

 
Docker uses a client-server architecture. The Docker client talks to the Docker daemon,
which does the heavy lifting of building, running, and distributing your Docker containers.
The Docker client and daemon can run on the same system, or you can connect a Docker client
to a remote Docker daemon. The Docker client and daemon communicate using a REST API,
over UNIX sockets or a network interface. Another Docker client is Docker Compose,
that lets you work with applications consisting of a set of containers.



- The Docker daemonðŸ”—

The Docker daemon (dockerd) listens for Docker API requests and manages Docker objects such as images,
containers, networks, and volumes. A daemon can also communicate with other daemons to manage Docker services.

- The Docker client

The Docker client (docker) is the primary way that many Docker users interact with Docker.
When you use commands such as docker run, the client sends these commands to dockerd,
which carries them out. The docker command uses the Docker API. The Docker client can communicate with more than one daemon.



Docker DesktopðŸ”—

Docker Desktop is an easy-to-install application for your Mac, Windows or Linux environment that enables
you to build and share containerized applications and microservices. Docker Desktop includes the Docker daemon (dockerd),
the Docker client (docker), Docker Compose, Docker Content Trust, Kubernetes, and Credential Helper. For more information, see Docker Desktop.

Docker registriesðŸ”—

A Docker registry stores Docker images. Docker Hub is a public registry that anyone can use,
and Docker is configured to look for images on Docker Hub by default. You can even run your own private registry.
When you use the docker pull or docker run commands, the required images are pulled from your configured registry.
When you use the docker push command, your image is pushed to your configured registry.


Docker objectsðŸ”—

When you use Docker, you are creating and using images, containers, networks, volumes,
plugins, and other objects. This section is a brief overview of some of those objects.


Images 

An image is a read-only template with instructions for creating a Docker container.
Often, an image is based on another image, with some additional customization. For example,
you may build an image which is based on the ubuntu image, but installs the Apache web server and your application,
as well as the configuration details needed to make your application run.

You might create your own images or you might only use those created by others and published in a registry.
To build your own image, you create a Dockerfile with a simple syntax for defining the steps needed to create
the image and run it. Each instruction in a Dockerfile creates a layer in the image. When you change the Dockerfile and rebuild the image,
only those layers which have changed are rebuilt. This is part of what makes images so lightweight, small, and fast,
when compared to other virtualization technologies.

Containers

A container is a runnable instance of an image. You can create, start, stop, move, or delete a container using the Docker API or CLI.
You can connect a container to one or more networks, attach storage to it, or even create a new image based on its current state.


----------------------------------------------

//--  how docker works <>

Docker works on a client-server architecture. It includes the docker client, docker host,
and docker registry. The docker client is used for triggering docker commands,
the docker host is used to running the docker daemon, and the docker registry to store docker images. 




// get more depth :






----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------















IBM +++++++

 Docker VS Vms

both of the technologies address something in common is <virtualization >

virtualization  : is a process where software is used to create an abstraction layer

For  Vms the abstraction layer or that abstraction software is called a hypervisors 


For docker is an open sourcee Platform that uses containerization technology  its allows
developers to package application and their dependencies into lightweight portable --containres--

Docker engine :
this is the core software that responsible for managing the lifecycle of docker container

there's some
and the docker engine interact with the host kernel to aallocat resource and enforce isolation between Containers


two thing primarily ; there's something called cgroups or control group and they aallocate resources among the proceses 

and something else namespaces restrict a container's access and visibility to other resources on the system

also ddocker images are lightweight , standalone and executable package thtat include everything you need to run a piece of software

so  we'arw talking about the code the software , the runtime, the system tools , the library and any setting that we need as well

 ----- Docker img build by dockerfile ==> which provide instruction for creating the image >

and then there also the Docker container themselves and these the instance of the images that run in docker engine 




--------------------------------------------------------------|

Docker networking 